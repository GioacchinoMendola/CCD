/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.festo.electricsizing.api;

import com.festo.electricsizing.model.AccessoriesItemDTO;
import com.festo.electricsizing.model.ApiError;
import com.festo.electricsizing.model.ConfigurationDTO;
import com.festo.electricsizing.model.EntryPageDTO;
import com.festo.electricsizing.model.FilterConfigurationDTO;
import com.festo.electricsizing.model.FilterResponseDTO;
import com.festo.electricsizing.model.InfoContentDTO;
import com.festo.electricsizing.model.RankingCriteriaDTO;
import com.festo.electricsizing.model.SolutionCriteriaRotaryIndexTable;
import com.festo.electricsizing.model.SolutionCriteriaRotaryThirdPartyTransmission;
import com.festo.electricsizing.model.SolutionResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-20T12:06:00.530142600+01:00[Europe/Berlin]")
@Validated
@Tag(name = "Accessories", description = "the Accessories API")
public interface V1Api {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/accessories : Determines accessories for a component.
     *
     * @param partNumber The part number of the component. e.g. 1370471 (required)
     * @param language language (optional, default to en)
     * @param country country (optional, default to us)
     * @return Returns a list with mapped AccessoriesItemDTO objects (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "accessoriesByPartNumber",
        summary = "Determines accessories for a component.",
        tags = { "Accessories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with mapped AccessoriesItemDTO objects", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccessoriesItemDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccessoriesItemDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accessories",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<AccessoriesItemDTO> _accessoriesByPartNumber(
        @NotNull @Parameter(name = "partNumber", description = "The part number of the component. e.g. 1370471", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "partNumber", required = true) String partNumber,
        @Parameter(name = "language", description = "language", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "country", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "us") String country
    ) {
        return accessoriesByPartNumber(partNumber, language, country);
    }

    // Override this method
    default  ResponseEntity<AccessoriesItemDTO> accessoriesByPartNumber(String partNumber, String language, String country) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"typeCode\" : \"typeCode\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"typeCode\" : \"typeCode\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/entrypage : Gets configuration for entry pages.
     *
     * @param language  (optional, default to en)
     * @param country  (optional, default to us)
     * @return Returns a List with EntryPageDTO objects (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "entryPages",
        summary = "Gets configuration for entry pages.",
        tags = { "Entry Page" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a List with EntryPageDTO objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EntryPageDTO.class))),
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = EntryPageDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/entrypage",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<List<EntryPageDTO>> _entryPages(
        @Parameter(name = "language", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "us") String country
    ) {
        return entryPages(language, country);
    }

    // Override this method
    default  ResponseEntity<List<EntryPageDTO>> entryPages(String language, String country) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "[ { \"images\" : [ { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" }, { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" } ], \"data\" : \"data\", \"description\" : \"description\", \"sort\" : 2, \"title\" : \"title\", \"type\" : \"type\", \"endpoint\" : \"endpoint\", \"entries\" : [ null, null ], \"slots\" : [ { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" }, { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" } ], \"route\" : { \"standalone\" : \"standalone\", \"fox\" : \"fox\" }, \"subHeading\" : \"subHeading\", \"trackingStep\" : 9, \"id\" : 6, \"applicationId\" : 0, \"headline\" : \"headline\", \"trackingId\" : 7 }, { \"images\" : [ { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" }, { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" } ], \"data\" : \"data\", \"description\" : \"description\", \"sort\" : 2, \"title\" : \"title\", \"type\" : \"type\", \"endpoint\" : \"endpoint\", \"entries\" : [ null, null ], \"slots\" : [ { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" }, { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" } ], \"route\" : { \"standalone\" : \"standalone\", \"fox\" : \"fox\" }, \"subHeading\" : \"subHeading\", \"trackingStep\" : 9, \"id\" : 6, \"applicationId\" : 0, \"headline\" : \"headline\", \"trackingId\" : 7 } ]";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"images\" : [ { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" }, { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" } ], \"data\" : \"data\", \"description\" : \"description\", \"sort\" : 2, \"title\" : \"title\", \"type\" : \"type\", \"endpoint\" : \"endpoint\", \"entries\" : [ null, null ], \"slots\" : [ { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" }, { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" } ], \"route\" : { \"standalone\" : \"standalone\", \"fox\" : \"fox\" }, \"subHeading\" : \"subHeading\", \"trackingStep\" : 9, \"id\" : 6, \"applicationId\" : 0, \"headline\" : \"headline\", \"trackingId\" : 7 }, { \"images\" : [ { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" }, { \"resource\" : [ { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" }, { \"src\" : { \"hover\" : \"hover\", \"main\" : \"main\" }, \"placeholder\" : \"placeholder\", \"type\" : \"type\" } ], \"type\" : \"type\" } ], \"data\" : \"data\", \"description\" : \"description\", \"sort\" : 2, \"title\" : \"title\", \"type\" : \"type\", \"endpoint\" : \"endpoint\", \"entries\" : [ null, null ], \"slots\" : [ { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" }, { \"newLine\" : true, \"size\" : 5, \"id\" : 1, \"sort\" : 5, \"type\" : \"type\" } ], \"route\" : { \"standalone\" : \"standalone\", \"fox\" : \"fox\" }, \"subHeading\" : \"subHeading\", \"trackingStep\" : 9, \"id\" : 6, \"applicationId\" : 0, \"headline\" : \"headline\", \"trackingId\" : 7 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filterApplication : Gets the filter configuration based on filter Id
     *
     * @param ids  (required)
     * @param language  (optional, default to en)
     * @param country  (optional, default to us)
     * @return A filter DTO Object requested by the filterApplicationId parameter (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filterApplication",
        summary = "Gets the filter configuration based on filter Id",
        tags = { "Filters", "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A filter DTO Object requested by the filterApplicationId parameter", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filterApplication",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<String> _filterApplication(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Integer> ids,
        @Parameter(name = "language", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "us") String country
    ) {
        return filterApplication(ids, language, country);
    }

    // Override this method
    default  ResponseEntity<String> filterApplication(List<Integer> ids, String language, String country) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filterConfiguration : Gets the filter configuration for a specific application
     *
     * @param language  (optional, default to en)
     * @param country  (optional, default to us)
     * @param applicationId  (optional, default to 1)
     * @param callerId  (optional, default to )
     * @return A list of filters available for filter parameter configuration provided in the request (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filterConfigurationByApplicationType",
        summary = "Gets the filter configuration for a specific application",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of filters available for filter parameter configuration provided in the request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterConfigurationDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterConfigurationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filterConfiguration",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterConfigurationDTO> _filterConfigurationByApplicationType(
        @Parameter(name = "language", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "us") String country,
        @Parameter(name = "applicationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicationId", required = false, defaultValue = "1") Integer applicationId,
        @Parameter(name = "callerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "callerId", required = false, defaultValue = "") String callerId
    ) {
        return filterConfigurationByApplicationType(language, country, applicationId, callerId);
    }

    // Override this method
    default  ResponseEntity<FilterConfigurationDTO> filterConfigurationByApplicationType(String language, String country, Integer applicationId, String callerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"groups\" : [ { \"expanded\" : true, \"visible\" : true, \"name\" : \"name\", \"filters\" : [ { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" }, { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" } ], \"id\" : \"id\", \"sort\" : 2, \"numberVisibleItems\" : 5 }, { \"expanded\" : true, \"visible\" : true, \"name\" : \"name\", \"filters\" : [ { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" }, { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" } ], \"id\" : \"id\", \"sort\" : 2, \"numberVisibleItems\" : 5 } ], \"version\" : \"version\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groups\" : [ { \"expanded\" : true, \"visible\" : true, \"name\" : \"name\", \"filters\" : [ { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" }, { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" } ], \"id\" : \"id\", \"sort\" : 2, \"numberVisibleItems\" : 5 }, { \"expanded\" : true, \"visible\" : true, \"name\" : \"name\", \"filters\" : [ { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" }, { \"calculation\" : { \"modalKey\" : \"modalKey\", \"link\" : \"link\", \"linkKey\" : \"linkKey\", \"type\" : \"type\" }, \"hidden\" : true, \"resolve\" : \"resolve\", \"showInPdf\" : true, \"configuration\" : { \"messageKey\" : \"messageKey\", \"index\" : 0, \"title\" : \"title\", \"headline\" : \"headline\", \"separator\" : \"separator\", \"showLabel\" : true, \"structure\" : \"structure\" }, \"icon\" : { \"visible\" : true, \"messageTranslationKey\" : \"messageTranslationKey\", \"imageSrc\" : \"imageSrc\", \"tableData\" : [ [ \"tableData\", \"tableData\" ], [ \"tableData\", \"tableData\" ] ], \"type\" : \"DEFAULT\", \"tableHead\" : [ [ \"tableHead\", \"tableHead\" ], [ \"tableHead\", \"tableHead\" ] ] }, \"rules\" : [ { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true }, { \"valueSet\" : \"valueSet\", \"targetId\" : 1, \"strict\" : true } ], \"filters\" : [ null, null ], \"label\" : \"label\", \"sort\" : 5, \"type\" : \"type\", \"tracking\" : { \"unit\" : \"unit\", \"label\" : \"label\", \"type\" : \"type\" }, \"required\" : true, \"expanded\" : true, \"unit\" : { \"name\" : \"name\", \"translation\" : \"translation\" }, \"view\" : \"view\", \"external\" : true, \"reset\" : true, \"disabled\" : true, \"comment\" : \"comment\", \"id\" : 6, \"value\" : { \"configuration\" : { \"magnitude\" : \"magnitude\" }, \"record\" : \"{}\" }, \"key\" : \"key\" } ], \"id\" : \"id\", \"sort\" : 2, \"numberVisibleItems\" : 5 } ], \"version\" : \"version\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/rackAndPinion : Determines technical dependencies for a provided list of parameters
     *
     * @param efficiencyRackPinion Percent (optional)
     * @param mountingPosition Degrees (optional)
     * @param pinionDiameter Millimeter (optional)
     * @param pinionInertia Kilogram centimeters squared (optional)
     * @param rackMass Kilogram (optional)
     * @param frictionCoefficient  (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters for  rack&amp;pinion (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filterRackPinion",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters for  rack&pinion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/rackAndPinion",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filterRackPinion(
        @Parameter(name = "Efficiency Rack Pinion", description = "Percent", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Efficiency Rack Pinion", required = false) String efficiencyRackPinion,
        @Parameter(name = "Mounting position", description = "Degrees", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting position", required = false) String mountingPosition,
        @Parameter(name = "Pinion Diameter", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pinion Diameter", required = false) String pinionDiameter,
        @Parameter(name = "Pinion Inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pinion Inertia", required = false) String pinionInertia,
        @Parameter(name = "Rack Mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Rack Mass", required = false) String rackMass,
        @Parameter(name = "Friction Coefficient", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction Coefficient", required = false) String frictionCoefficient,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filterRackPinion(efficiencyRackPinion, mountingPosition, pinionDiameter, pinionInertia, rackMass, frictionCoefficient, thirdPartyTransmissionRatio, acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filterRackPinion(String efficiencyRackPinion, String mountingPosition, String pinionDiameter, String pinionInertia, String rackMass, String frictionCoefficient, String thirdPartyTransmissionRatio, String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/ballScrew : Determines technical dependencies for a provided list of parameters
     *
     * @param ballScrewInertia Kilogram centimeters squared.  (optional)
     * @param ballScrewPitch Millimeters per rotation (optional)
     * @param efficiencyBallScrewActuator Percent (optional)
     * @param mountingPosition Degrees (optional)
     * @param sliderMass Kilogram (optional)
     * @param frictionCoefficient  (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters for third party application ball screw (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersBallScrew",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters for third party application ball screw", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/ballScrew",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersBallScrew(
        @Parameter(name = "Ball screw inertia", description = "Kilogram centimeters squared. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ball screw inertia", required = false) String ballScrewInertia,
        @Parameter(name = "Ball screw pitch", description = "Millimeters per rotation", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ball screw pitch", required = false) String ballScrewPitch,
        @Parameter(name = "Efficiency ball screw actuator", description = "Percent", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Efficiency ball screw actuator", required = false) String efficiencyBallScrewActuator,
        @Parameter(name = "Mounting position", description = "Degrees", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting position", required = false) String mountingPosition,
        @Parameter(name = "Slider Mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slider Mass", required = false) String sliderMass,
        @Parameter(name = "Friction Coefficient", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction Coefficient", required = false) String frictionCoefficient,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersBallScrew(ballScrewInertia, ballScrewPitch, efficiencyBallScrewActuator, mountingPosition, sliderMass, frictionCoefficient, thirdPartyTransmissionRatio, acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersBallScrew(String ballScrewInertia, String ballScrewPitch, String efficiencyBallScrewActuator, String mountingPosition, String sliderMass, String frictionCoefficient, String thirdPartyTransmissionRatio, String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/conveyorBelt : Determines technical dependencies for a provided list of parameters
     *
     * @param beltMass  (optional)
     * @param efficiencyConveyor  (optional)
     * @param mountingOrientation  (optional)
     * @param rollDiameter  (optional)
     * @param rollInertia  (optional)
     * @param useCaseType  (optional)
     * @param frictionCoefficient  (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters for third party application conveyor belt (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersConveyorBelt",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters for third party application conveyor belt", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/conveyorBelt",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersConveyorBelt(
        @Parameter(name = "beltMass", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "beltMass", required = false) Double beltMass,
        @Parameter(name = "efficiencyConveyor", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "efficiencyConveyor", required = false) Integer efficiencyConveyor,
        @Parameter(name = "mountingOrientation", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mountingOrientation", required = false) Double mountingOrientation,
        @Parameter(name = "rollDiameter", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rollDiameter", required = false) Double rollDiameter,
        @Parameter(name = "rollInertia", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rollInertia", required = false) Double rollInertia,
        @Parameter(name = "useCaseType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useCaseType", required = false) String useCaseType,
        @Parameter(name = "Friction Coefficient", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction Coefficient", required = false) String frictionCoefficient,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersConveyorBelt(beltMass, efficiencyConveyor, mountingOrientation, rollDiameter, rollInertia, useCaseType, frictionCoefficient, thirdPartyTransmissionRatio, acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersConveyorBelt(Double beltMass, Integer efficiencyConveyor, Double mountingOrientation, Double rollDiameter, Double rollInertia, String useCaseType, String frictionCoefficient, String thirdPartyTransmissionRatio, String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/handlingAB : Determines technical dependencies for a provided list of parameters
     *
     * @param includingPayloadForPostionStepAB  (optional)
     * @param includingPayloadForPostionStepBA  (optional)
     * @param pauseTimeA Second (optional)
     * @param pauseTimeB Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param travelTimeAB Second (optional)
     * @param travelTimeModeAB  (optional)
     * @param travelTimeBA  (optional)
     * @param travelTimeModeBA  (optional)
     * @param useCaseType  (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters for 2-Position Handling (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersHandlingAB",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters for 2-Position Handling", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/handlingAB",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersHandlingAB(
        @Parameter(name = "Including Payload for Postion Step AB", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Including Payload for Postion Step AB", required = false) Boolean includingPayloadForPostionStepAB,
        @Parameter(name = "Including Payload for Postion Step BA", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Including Payload for Postion Step BA", required = false) Boolean includingPayloadForPostionStepBA,
        @Parameter(name = "Pause time A", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time A", required = false) Double pauseTimeA,
        @Parameter(name = "Pause time B", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time B", required = false) Double pauseTimeB,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) Double thePayloadMass,
        @Parameter(name = "Travel time AB", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time AB", required = false) Double travelTimeAB,
        @Parameter(name = "Travel time mode AB", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode AB", required = false) String travelTimeModeAB,
        @Parameter(name = "Travel time BA", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time BA", required = false) Double travelTimeBA,
        @Parameter(name = "Travel time mode BA", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode BA", required = false) String travelTimeModeBA,
        @Parameter(name = "Use case type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Use case type", required = false) String useCaseType,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersHandlingAB(includingPayloadForPostionStepAB, includingPayloadForPostionStepBA, pauseTimeA, pauseTimeB, thePayloadMass, travelTimeAB, travelTimeModeAB, travelTimeBA, travelTimeModeBA, useCaseType, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersHandlingAB(Boolean includingPayloadForPostionStepAB, Boolean includingPayloadForPostionStepBA, Double pauseTimeA, Double pauseTimeB, Double thePayloadMass, Double travelTimeAB, String travelTimeModeAB, Double travelTimeBA, String travelTimeModeBA, String useCaseType, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/indexTable : Determines technical dependencies for a provided list of parameters
     *
     * @param criteria  (required)
     * @return Returns a list with available filters for third party application index table (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersIndexTable",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters for third party application index table", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/indexTable",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersIndexTable(
        @NotNull @Parameter(name = "criteria", description = "", required = true, in = ParameterIn.QUERY) @Valid SolutionCriteriaRotaryIndexTable criteria
    ) {
        return filtersIndexTable(criteria);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersIndexTable(SolutionCriteriaRotaryIndexTable criteria) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/pressing : Determines technical dependencies for a provided list of parameters
     *
     * @param maximumCycleTime Second (optional)
     * @param offsetPressingDepth Millimeter (optional)
     * @param pauseTimeAfterEachCycle Second (optional)
     * @param pressingForce Newton (optional)
     * @param speedPressing Meters per second (optional)
     * @param startPositionOfPressing Millimeter (optional)
     * @param theToolPayload Kilogram (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters forPressing Application (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersPressing",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters forPressing Application", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/pressing",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersPressing(
        @Parameter(name = "Maximum cycle time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Maximum cycle time", required = false) Double maximumCycleTime,
        @Parameter(name = "Offset - pressing depth", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Offset - pressing depth", required = false) Double offsetPressingDepth,
        @Parameter(name = "Pause time after each cycle", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time after each cycle", required = false) Double pauseTimeAfterEachCycle,
        @Parameter(name = "Pressing Force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pressing Force", required = false) Double pressingForce,
        @Parameter(name = "Speed pressing", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed pressing", required = false) Double speedPressing,
        @Parameter(name = "Start position of pressing", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Start position of pressing", required = false) Double startPositionOfPressing,
        @Parameter(name = "The tool payload", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The tool payload", required = false) Double theToolPayload,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersPressing(maximumCycleTime, offsetPressingDepth, pauseTimeAfterEachCycle, pressingForce, speedPressing, startPositionOfPressing, theToolPayload, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersPressing(Double maximumCycleTime, Double offsetPressingDepth, Double pauseTimeAfterEachCycle, Double pressingForce, Double speedPressing, Double startPositionOfPressing, Double theToolPayload, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/runUpAndContinuousOperation : Determines technical dependencies for a provided list of parameters
     *
     * @param externalTorqueNm  (optional)
     * @param externalTorqueAct  (optional)
     * @param massMomentOfInertiaKgStarCm2  (optional)
     * @param maxAccelerationTimeS  (optional)
     * @param targetSpeedRpm  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters run-up Application (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersRunUp",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters run-up Application", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/runUpAndContinuousOperation",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersRunUp(
        @Parameter(name = "External Torque (Nm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External Torque (Nm)", required = false) Double externalTorqueNm,
        @Parameter(name = "External torque act", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External torque act", required = false) String externalTorqueAct,
        @Parameter(name = "Mass moment of inertia (kg*cm2)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mass moment of inertia (kg*cm2)", required = false) Double massMomentOfInertiaKgStarCm2,
        @Parameter(name = "Max. acceleration time (s)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. acceleration time (s)", required = false) Double maxAccelerationTimeS,
        @Parameter(name = "Target speed (rpm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target speed (rpm)", required = false) Double targetSpeedRpm,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersRunUp(externalTorqueNm, externalTorqueAct, massMomentOfInertiaKgStarCm2, maxAccelerationTimeS, targetSpeedRpm, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersRunUp(Double externalTorqueNm, String externalTorqueAct, Double massMomentOfInertiaKgStarCm2, Double maxAccelerationTimeS, Double targetSpeedRpm, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/thirdPartyTransmission : Determines technical dependencies for a provided list of parameters
     *
     * @param criteria  (required)
     * @return Returns a list with available filters for Third Party transmission (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersThirdPartyTransmission",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters for Third Party transmission", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/thirdPartyTransmission",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersThirdPartyTransmission(
        @NotNull @Parameter(name = "criteria", description = "", required = true, in = ParameterIn.QUERY) @Valid SolutionCriteriaRotaryThirdPartyTransmission criteria
    ) {
        return filtersThirdPartyTransmission(criteria);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersThirdPartyTransmission(SolutionCriteriaRotaryThirdPartyTransmission criteria) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/userSpecificLinear : Determines technical dependencies for a provided list of parameters
     *
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters User Specific Application linear (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersUserSpecificLinear",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters User Specific Application linear", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/userSpecificLinear",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersUserSpecificLinear(
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersUserSpecificLinear(acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersUserSpecificLinear(String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/filters/userSpecificRotary : Determines technical dependencies for a provided list of parameters
     *
     * @param acceleration Revolutions per minute per second (optional)
     * @param deceleration Revolutions per minute per second (optional)
     * @param externalTorque Newton (optional)
     * @param massMomentOfInertia Kilogram centimeters squared (optional)
     * @param pauseTime Second (optional)
     * @param targetPosition Number of rotations (optional)
     * @param targetSpeed Revolutions per minute (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a list with available filters User Specific Application rotary (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "filtersUserSpecificRotary",
        summary = "Determines technical dependencies for a provided list of parameters",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list with available filters User Specific Application rotary", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/filters/userSpecificRotary",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _filtersUserSpecificRotary(
        @Parameter(name = "Acceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "External Torque", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External Torque", required = false) String externalTorque,
        @Parameter(name = "Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mass moment of inertia", required = false) String massMomentOfInertia,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "Target position", description = "Number of rotations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target position", required = false) String targetPosition,
        @Parameter(name = "Target speed", description = "Revolutions per minute", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target speed", required = false) String targetSpeed,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return filtersUserSpecificRotary(acceleration, deceleration, externalTorque, massMomentOfInertia, pauseTime, targetPosition, targetSpeed, travelTime, travelTimeMode, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> filtersUserSpecificRotary(String acceleration, String deceleration, String externalTorque, String massMomentOfInertia, String pauseTime, String targetPosition, String targetSpeed, String travelTime, String travelTimeMode, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/configuration : Gets general configuration needed for the application.
     *
     * @param language  (optional, default to en)
     * @param country  (optional, default to us)
     * @return Returns a ConfigurationDTO object (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "generalConfiguration",
        summary = "Gets general configuration needed for the application.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a ConfigurationDTO object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConfigurationDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ConfigurationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/configuration",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<ConfigurationDTO> _generalConfiguration(
        @Parameter(name = "language", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "us") String country
    ) {
        return generalConfiguration(language, country);
    }

    // Override this method
    default  ResponseEntity<ConfigurationDTO> generalConfiguration(String language, String country) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"projectData\" : { \"key\" : \"projectData\" }, \"solutionThreshold\" : 0, \"showBugReportPopUp\" : true, \"supportEmail\" : \"supportEmail\", \"systems\" : [ { \"translationKey\" : \"translationKey\", \"trackingStep\" : 7, \"name\" : \"name\", \"id\" : 5, \"applications\" : [ { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 }, { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 } ], \"trackingId\" : 2 }, { \"translationKey\" : \"translationKey\", \"trackingStep\" : 7, \"name\" : \"name\", \"id\" : 5, \"applications\" : [ { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 }, { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 } ], \"trackingId\" : 2 } ], \"dclsCallerId\" : \"dclsCallerId\", \"tracking\" : [ { \"trackingStep\" : 3, \"page\" : \"page\", \"trackingId\" : 9 }, { \"trackingStep\" : 3, \"page\" : \"page\", \"trackingId\" : 9 } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"projectData\" : { \"key\" : \"projectData\" }, \"solutionThreshold\" : 0, \"showBugReportPopUp\" : true, \"supportEmail\" : \"supportEmail\", \"systems\" : [ { \"translationKey\" : \"translationKey\", \"trackingStep\" : 7, \"name\" : \"name\", \"id\" : 5, \"applications\" : [ { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 }, { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 } ], \"trackingId\" : 2 }, { \"translationKey\" : \"translationKey\", \"trackingStep\" : 7, \"name\" : \"name\", \"id\" : 5, \"applications\" : [ { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 }, { \"translationKey\" : \"translationKey\", \"trackingStep\" : 5, \"name\" : \"name\", \"id\" : 6, \"trackingId\" : 1 } ], \"trackingId\" : 2 } ], \"dclsCallerId\" : \"dclsCallerId\", \"tracking\" : [ { \"trackingStep\" : 3, \"page\" : \"page\", \"trackingId\" : 9 }, { \"trackingStep\" : 3, \"page\" : \"page\", \"trackingId\" : 9 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/auth/keys : Gets authentication keys which will be used for authentication process.
     *
     * @return Keys for authentication process (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getKeys",
        summary = "Gets authentication keys which will be used for authentication process.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Keys for authentication process"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/auth/keys",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<Void> _getKeys(
        
    ) {
        return getKeys();
    }

    // Override this method
    default  ResponseEntity<Void> getKeys() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/health : Checks the health of the system.
     *
     * @return Returns the Status (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "health",
        summary = "Checks the health of the system.",
        tags = { "Health" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the Status", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = FilterResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/health",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<FilterResponseDTO> _health(
        
    ) {
        return health();
    }

    // Override this method
    default  ResponseEntity<FilterResponseDTO> health() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"computed\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"solutions\" : { \"total\" : 5 }, \"options\" : { \"actuatorFlangeSize\" : [ 0, 0 ], \"motorMounting\" : [ \"AXIAL\", \"AXIAL\" ], \"nominalVoltageAC3Phase\" : [ \"DC_24\", \"DC_24\" ], \"motorFlangeSize\" : [ 1, 1 ], \"actuatorFamily\" : [ \"EGC\", \"EGC\" ], \"nominalVoltageAC1Phase\" : [ \"DC_24\", \"DC_24\" ], \"gearRatio\" : [ 6, 6 ], \"motorControllerFamily\" : [ \"CMMT_AS\", \"CMMT_AS\" ], \"gearType\" : [ \"PLANETARY\", \"PLANETARY\" ], \"motorTechnology\" : [ \"STEPPER_MOTOR\", \"STEPPER_MOTOR\" ], \"encoder\" : [ \"encoder\", \"encoder\" ], \"networkCommunication\" : [ \"PROFINET\", \"PROFINET\" ], \"nominalVoltageDC\" : [ \"DC_24\", \"DC_24\" ], \"foodIndustry\" : [ true, true ], \"actuatorTechnology\" : [ \"SPINDLE\", \"SPINDLE\" ], \"guideTechnology\" : [ \"guideTechnology\", \"guideTechnology\" ], \"motorFamily\" : [ \"EMMT_AS\", \"EMMT_AS\" ], \"correlationId\" : \"correlationId\", \"motorBrake\" : [ \"WITH_BRAKE\", \"WITH_BRAKE\" ], \"slideProtected\" : [ true, true ], \"actuatorType\" : [ \"PORTAL_ACTUATOR\", \"PORTAL_ACTUATOR\" ] }, \"correlationId\" : \"correlationId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/infoContent : Gets content for the info window in the UI.
     *
     * @param values  (required)
     * @param language  (optional, default to en)
     * @param country  (optional, default to us)
     * @return Returns a list InfoContentDTO object (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "infoContent",
        summary = "Gets content for the info window in the UI.",
        tags = { "InfoContent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list InfoContentDTO object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InfoContentDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = InfoContentDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/infoContent",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<InfoContentDTO> _infoContent(
        @NotNull @Parameter(name = "values", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "values", required = true) List<String> values,
        @Parameter(name = "language", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "us") String country
    ) {
        return infoContent(values, language, country);
    }

    // Override this method
    default  ResponseEntity<InfoContentDTO> infoContent(List<String> values, String language, String country) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"description\" : \"description\", \"title\" : \"title\", \"shortCode\" : \"shortCode\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"description\" : \"description\", \"title\" : \"title\", \"shortCode\" : \"shortCode\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/configuration/rankingCriteria : Gets the ranking criteria configuration for a specific application.
     *
     * @param applicationId  (optional, default to 1)
     * @return A list of  RankingCriteria objects (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "rankingCriteriaByApplicationType",
        summary = "Gets the ranking criteria configuration for a specific application.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of  RankingCriteria objects", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RankingCriteriaDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = RankingCriteriaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/configuration/rankingCriteria",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<RankingCriteriaDTO> _rankingCriteriaByApplicationType(
        @Parameter(name = "applicationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicationId", required = false, defaultValue = "1") Integer applicationId
    ) {
        return rankingCriteriaByApplicationType(applicationId);
    }

    // Override this method
    default  ResponseEntity<RankingCriteriaDTO> rankingCriteriaByApplicationType(Integer applicationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"translationKey\" : \"translationKey\", \"name\" : \"name\", \"sortField\" : \"sortField\", \"id\" : 0, \"sort\" : 6, \"order\" : \"ASC\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"translationKey\" : \"translationKey\", \"name\" : \"name\", \"sortField\" : \"sortField\", \"id\" : 0, \"sort\" : 6, \"order\" : \"ASC\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/ballScrew : Gets Solutions for third party application type ball screw.
     *
     * @param ballScrewInertia Kilogram centimeters squared.  (optional)
     * @param ballScrewPitch Millimeters per rotation (optional)
     * @param efficiencyBallScrewActuator Percent (optional)
     * @param mountingPosition Degrees (optional)
     * @param sliderMass Kilogram (optional)
     * @param frictionCoefficient  (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForBallScrew",
        summary = "Gets Solutions for third party application type ball screw.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/ballScrew",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForBallScrew(
        @Parameter(name = "Ball screw inertia", description = "Kilogram centimeters squared. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ball screw inertia", required = false) String ballScrewInertia,
        @Parameter(name = "Ball screw pitch", description = "Millimeters per rotation", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ball screw pitch", required = false) String ballScrewPitch,
        @Parameter(name = "Efficiency ball screw actuator", description = "Percent", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Efficiency ball screw actuator", required = false) String efficiencyBallScrewActuator,
        @Parameter(name = "Mounting position", description = "Degrees", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting position", required = false) String mountingPosition,
        @Parameter(name = "Slider Mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slider Mass", required = false) String sliderMass,
        @Parameter(name = "Friction Coefficient", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction Coefficient", required = false) String frictionCoefficient,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForBallScrew(ballScrewInertia, ballScrewPitch, efficiencyBallScrewActuator, mountingPosition, sliderMass, frictionCoefficient, thirdPartyTransmissionRatio, acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForBallScrew(String ballScrewInertia, String ballScrewPitch, String efficiencyBallScrewActuator, String mountingPosition, String sliderMass, String frictionCoefficient, String thirdPartyTransmissionRatio, String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/conveyorBelt : Gets Solutions for third party application type conveyor belt.
     *
     * @param beltMass  (optional)
     * @param efficiencyConveyor  (optional)
     * @param mountingOrientation  (optional)
     * @param rollDiameter  (optional)
     * @param rollInertia  (optional)
     * @param useCaseType  (optional)
     * @param frictionCoefficient  (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForConveyorBelt",
        summary = "Gets Solutions for third party application type conveyor belt.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/conveyorBelt",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForConveyorBelt(
        @Parameter(name = "beltMass", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "beltMass", required = false) Double beltMass,
        @Parameter(name = "efficiencyConveyor", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "efficiencyConveyor", required = false) Integer efficiencyConveyor,
        @Parameter(name = "mountingOrientation", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mountingOrientation", required = false) Double mountingOrientation,
        @Parameter(name = "rollDiameter", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rollDiameter", required = false) Double rollDiameter,
        @Parameter(name = "rollInertia", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rollInertia", required = false) Double rollInertia,
        @Parameter(name = "useCaseType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useCaseType", required = false) String useCaseType,
        @Parameter(name = "Friction Coefficient", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction Coefficient", required = false) String frictionCoefficient,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForConveyorBelt(beltMass, efficiencyConveyor, mountingOrientation, rollDiameter, rollInertia, useCaseType, frictionCoefficient, thirdPartyTransmissionRatio, acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForConveyorBelt(Double beltMass, Integer efficiencyConveyor, Double mountingOrientation, Double rollDiameter, Double rollInertia, String useCaseType, String frictionCoefficient, String thirdPartyTransmissionRatio, String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/flyingSaw : Gets Solutions for application type flying saw.
     *
     * @param thePayloadMass Kilogram (required)
     * @param maximumSpeed Meter pro second (optional)
     * @param pauseTimeA Second (optional)
     * @param pauseTimeB Second (optional)
     * @param travelDistanceAtMaxSpeed Millimeter (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForFlyingSaw",
        summary = "Gets Solutions for application type flying saw.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/flyingSaw",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForFlyingSaw(
        @NotNull @Parameter(name = "The payload mass", description = "Kilogram", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = true) Double thePayloadMass,
        @Parameter(name = "Maximum speed", description = "Meter pro second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Maximum speed", required = false) Double maximumSpeed,
        @Parameter(name = "Pause time A", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time A", required = false) Double pauseTimeA,
        @Parameter(name = "Pause time B", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time B", required = false) Double pauseTimeB,
        @Parameter(name = "Travel distance at max. speed", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel distance at max. speed", required = false) Double travelDistanceAtMaxSpeed,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForFlyingSaw(thePayloadMass, maximumSpeed, pauseTimeA, pauseTimeB, travelDistanceAtMaxSpeed, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForFlyingSaw(Double thePayloadMass, Double maximumSpeed, Double pauseTimeA, Double pauseTimeB, Double travelDistanceAtMaxSpeed, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/handlingAB : Gets Solutions for application type HandlingAB.
     *
     * @param includingPayloadForPostionStepAB  (optional)
     * @param includingPayloadForPostionStepBA  (optional)
     * @param pauseTimeA Second (optional)
     * @param pauseTimeB Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param travelTimeAB Second (optional)
     * @param travelTimeModeAB  (optional)
     * @param travelTimeBA  (optional)
     * @param travelTimeModeBA  (optional)
     * @param useCaseType  (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForHandlingAB",
        summary = "Gets Solutions for application type HandlingAB.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/handlingAB",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForHandlingAB(
        @Parameter(name = "Including Payload for Postion Step AB", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Including Payload for Postion Step AB", required = false) Boolean includingPayloadForPostionStepAB,
        @Parameter(name = "Including Payload for Postion Step BA", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Including Payload for Postion Step BA", required = false) Boolean includingPayloadForPostionStepBA,
        @Parameter(name = "Pause time A", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time A", required = false) Double pauseTimeA,
        @Parameter(name = "Pause time B", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time B", required = false) Double pauseTimeB,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) Double thePayloadMass,
        @Parameter(name = "Travel time AB", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time AB", required = false) Double travelTimeAB,
        @Parameter(name = "Travel time mode AB", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode AB", required = false) String travelTimeModeAB,
        @Parameter(name = "Travel time BA", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time BA", required = false) Double travelTimeBA,
        @Parameter(name = "Travel time mode BA", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode BA", required = false) String travelTimeModeBA,
        @Parameter(name = "Use case type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Use case type", required = false) String useCaseType,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForHandlingAB(includingPayloadForPostionStepAB, includingPayloadForPostionStepBA, pauseTimeA, pauseTimeB, thePayloadMass, travelTimeAB, travelTimeModeAB, travelTimeBA, travelTimeModeBA, useCaseType, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForHandlingAB(Boolean includingPayloadForPostionStepAB, Boolean includingPayloadForPostionStepBA, Double pauseTimeA, Double pauseTimeB, Double thePayloadMass, Double travelTimeAB, String travelTimeModeAB, Double travelTimeBA, String travelTimeModeBA, String useCaseType, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/indexTable : Gets Solutions for third party application type index table.
     *
     * @param efficiencyBallIndexTable Percent (optional)
     * @param externalTorqueMode  (optional)
     * @param tableDiameter  (optional)
     * @param tableMass Kilogram (optional)
     * @param targetPosition Degrees (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param useCaseType  (optional)
     * @param acceleration Revolutions per minute per second (optional)
     * @param deceleration Revolutions per minute per second (optional)
     * @param externalTorque Newton (optional)
     * @param massMomentOfInertia Kilogram centimeters squared (optional)
     * @param pauseTime Second (optional)
     * @param targetSpeed Revolutions per minute (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param rotaryActuatorFamily  (optional)
     * @param rotaryActuatorFlangeSize  (optional)
     * @param rotaryAllSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param rotaryGearRatio  (optional)
     * @param rotaryGearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param rotaryMotorControllerFamily  (optional)
     * @param rotaryMotorFamily  (optional)
     * @param rotaryMotorFlangeSize  (optional)
     * @param rotaryMotorTechnology  (optional)
     * @param rotaryNetworkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForIndexTable",
        summary = "Gets Solutions for third party application type index table.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/indexTable",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForIndexTable(
        @Parameter(name = "Efficiency ball index table", description = "Percent", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Efficiency ball index table", required = false) String efficiencyBallIndexTable,
        @Parameter(name = "External torque mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External torque mode", required = false) String externalTorqueMode,
        @Parameter(name = "Table diameter", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Table diameter", required = false) String tableDiameter,
        @Parameter(name = "Table Mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Table Mass", required = false) String tableMass,
        @Parameter(name = "Target position", description = "Degrees", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target position", required = false) String targetPosition,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "useCaseType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useCaseType", required = false) String useCaseType,
        @Parameter(name = "Acceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "External Torque", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External Torque", required = false) String externalTorque,
        @Parameter(name = "Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mass moment of inertia", required = false) String massMomentOfInertia,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "Target speed", description = "Revolutions per minute", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target speed", required = false) String targetSpeed,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "rotary.actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.actuatorFamily", required = false) List<String> rotaryActuatorFamily,
        @Parameter(name = "rotary.actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.actuatorFlangeSize", required = false) List<Integer> rotaryActuatorFlangeSize,
        @Parameter(name = "rotary.allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.allSolutions", required = false) Boolean rotaryAllSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "rotary.gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.gearRatio", required = false) List<Integer> rotaryGearRatio,
        @Parameter(name = "rotary.gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.gearboxType", required = false) List<String> rotaryGearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "rotary.motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorControllerFamily", required = false) List<String> rotaryMotorControllerFamily,
        @Parameter(name = "rotary.motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorFamily", required = false) List<String> rotaryMotorFamily,
        @Parameter(name = "rotary.motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorFlangeSize", required = false) List<Integer> rotaryMotorFlangeSize,
        @Parameter(name = "rotary.motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorTechnology", required = false) List<String> rotaryMotorTechnology,
        @Parameter(name = "rotary.networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.networkCommunication", required = false) List<String> rotaryNetworkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication
    ) {
        return solutionsForIndexTable(efficiencyBallIndexTable, externalTorqueMode, tableDiameter, tableMass, targetPosition, thirdPartyTransmissionRatio, useCaseType, acceleration, deceleration, externalTorque, massMomentOfInertia, pauseTime, targetSpeed, travelTime, travelTimeMode, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, rotaryActuatorFamily, rotaryActuatorFlangeSize, rotaryAllSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, rotaryGearRatio, rotaryGearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, rotaryMotorControllerFamily, rotaryMotorFamily, rotaryMotorFlangeSize, rotaryMotorTechnology, rotaryNetworkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorFamily, actuatorFlangeSize, allSolutions, gearRatio, gearboxType, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForIndexTable(String efficiencyBallIndexTable, String externalTorqueMode, String tableDiameter, String tableMass, String targetPosition, String thirdPartyTransmissionRatio, String useCaseType, String acceleration, String deceleration, String externalTorque, String massMomentOfInertia, String pauseTime, String targetSpeed, String travelTime, String travelTimeMode, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> rotaryActuatorFamily, List<Integer> rotaryActuatorFlangeSize, Boolean rotaryAllSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> rotaryGearRatio, List<String> rotaryGearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> rotaryMotorControllerFamily, List<String> rotaryMotorFamily, List<Integer> rotaryMotorFlangeSize, List<String> rotaryMotorTechnology, List<String> rotaryNetworkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, List<Integer> gearRatio, List<String> gearboxType, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/pressing : Gets Solutions for application type Pressing.
     *
     * @param maximumCycleTime Second (optional)
     * @param offsetPressingDepth Millimeter (optional)
     * @param pauseTimeAfterEachCycle Second (optional)
     * @param pressingForce Newton (optional)
     * @param speedPressing Meters per second (optional)
     * @param startPositionOfPressing Millimeter (optional)
     * @param theToolPayload Kilogram (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForPressing",
        summary = "Gets Solutions for application type Pressing.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/pressing",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForPressing(
        @Parameter(name = "Maximum cycle time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Maximum cycle time", required = false) Double maximumCycleTime,
        @Parameter(name = "Offset - pressing depth", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Offset - pressing depth", required = false) Double offsetPressingDepth,
        @Parameter(name = "Pause time after each cycle", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time after each cycle", required = false) Double pauseTimeAfterEachCycle,
        @Parameter(name = "Pressing Force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pressing Force", required = false) Double pressingForce,
        @Parameter(name = "Speed pressing", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed pressing", required = false) Double speedPressing,
        @Parameter(name = "Start position of pressing", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Start position of pressing", required = false) Double startPositionOfPressing,
        @Parameter(name = "The tool payload", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The tool payload", required = false) Double theToolPayload,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForPressing(maximumCycleTime, offsetPressingDepth, pauseTimeAfterEachCycle, pressingForce, speedPressing, startPositionOfPressing, theToolPayload, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForPressing(Double maximumCycleTime, Double offsetPressingDepth, Double pauseTimeAfterEachCycle, Double pressingForce, Double speedPressing, Double startPositionOfPressing, Double theToolPayload, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/runUpAndContinuousOperation : Gets Solutions for application type Run up.
     *
     * @param externalTorqueNm  (optional)
     * @param externalTorqueAct  (optional)
     * @param massMomentOfInertiaKgStarCm2  (optional)
     * @param maxAccelerationTimeS  (optional)
     * @param targetSpeedRpm  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForRunUp",
        summary = "Gets Solutions for application type Run up.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/runUpAndContinuousOperation",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForRunUp(
        @Parameter(name = "External Torque (Nm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External Torque (Nm)", required = false) Double externalTorqueNm,
        @Parameter(name = "External torque act", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External torque act", required = false) String externalTorqueAct,
        @Parameter(name = "Mass moment of inertia (kg*cm2)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mass moment of inertia (kg*cm2)", required = false) Double massMomentOfInertiaKgStarCm2,
        @Parameter(name = "Max. acceleration time (s)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. acceleration time (s)", required = false) Double maxAccelerationTimeS,
        @Parameter(name = "Target speed (rpm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target speed (rpm)", required = false) Double targetSpeedRpm,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForRunUp(externalTorqueNm, externalTorqueAct, massMomentOfInertiaKgStarCm2, maxAccelerationTimeS, targetSpeedRpm, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForRunUp(Double externalTorqueNm, String externalTorqueAct, Double massMomentOfInertiaKgStarCm2, Double maxAccelerationTimeS, Double targetSpeedRpm, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/rackAndPinion : Gets Solutions for third party Rack &amp; Pinion application.
     *
     * @param efficiencyRackPinion Percent (optional)
     * @param mountingPosition Degrees (optional)
     * @param pinionDiameter Millimeter (optional)
     * @param pinionInertia Kilogram centimeters squared (optional)
     * @param rackMass Kilogram (optional)
     * @param frictionCoefficient  (optional)
     * @param thirdPartyTransmissionRatio Ratio (optional)
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForRunUp1",
        summary = "Gets Solutions for third party Rack & Pinion application.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/rackAndPinion",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForRunUp1(
        @Parameter(name = "Efficiency Rack Pinion", description = "Percent", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Efficiency Rack Pinion", required = false) String efficiencyRackPinion,
        @Parameter(name = "Mounting position", description = "Degrees", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting position", required = false) String mountingPosition,
        @Parameter(name = "Pinion Diameter", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pinion Diameter", required = false) String pinionDiameter,
        @Parameter(name = "Pinion Inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pinion Inertia", required = false) String pinionInertia,
        @Parameter(name = "Rack Mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Rack Mass", required = false) String rackMass,
        @Parameter(name = "Friction Coefficient", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction Coefficient", required = false) String frictionCoefficient,
        @Parameter(name = "Third Party Transmission Ratio", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio", required = false) String thirdPartyTransmissionRatio,
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForRunUp1(efficiencyRackPinion, mountingPosition, pinionDiameter, pinionInertia, rackMass, frictionCoefficient, thirdPartyTransmissionRatio, acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForRunUp1(String efficiencyRackPinion, String mountingPosition, String pinionDiameter, String pinionInertia, String rackMass, String frictionCoefficient, String thirdPartyTransmissionRatio, String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/thirdPartyTransmission : Gets Solutions for Third party transmission.
     *
     * @param externalTorqueMode  (optional)
     * @param targetPosition Degrees (optional)
     * @param thirdPartyTransmissionRatioNumerator Ratio (optional)
     * @param thirdPartyTransmissionRatioDenominator Ratio (optional)
     * @param useCaseType  (optional)
     * @param acceleration Revolutions per minute per second (optional)
     * @param deceleration Revolutions per minute per second (optional)
     * @param externalTorque Newton (optional)
     * @param massMomentOfInertia Kilogram centimeters squared (optional)
     * @param pauseTime Second (optional)
     * @param targetSpeed Revolutions per minute (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param rotaryActuatorFamily  (optional)
     * @param rotaryActuatorFlangeSize  (optional)
     * @param rotaryAllSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param rotaryGearRatio  (optional)
     * @param rotaryGearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param rotaryMotorControllerFamily  (optional)
     * @param rotaryMotorFamily  (optional)
     * @param rotaryMotorFlangeSize  (optional)
     * @param rotaryMotorTechnology  (optional)
     * @param rotaryNetworkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @param includeThirdPartyTransmission  (optional)
     * @param thirdPartyMassMomentOfInertia Kilogram centimeters squared (optional)
     * @param thirdPartyTransmissionEfficiency  (optional)
     * @param thirdPartyTransmissionName  (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForThirdPartyTransmission",
        summary = "Gets Solutions for Third party transmission.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/thirdPartyTransmission",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForThirdPartyTransmission(
        @Parameter(name = "External torque mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External torque mode", required = false) String externalTorqueMode,
        @Parameter(name = "Target position", description = "Degrees", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target position", required = false) String targetPosition,
        @Parameter(name = "Third Party Transmission Ratio Numerator", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio Numerator", required = false) String thirdPartyTransmissionRatioNumerator,
        @Parameter(name = "Third Party Transmission Ratio Denominator", description = "Ratio", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Ratio Denominator", required = false) String thirdPartyTransmissionRatioDenominator,
        @Parameter(name = "useCaseType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useCaseType", required = false) String useCaseType,
        @Parameter(name = "Acceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "External Torque", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External Torque", required = false) String externalTorque,
        @Parameter(name = "Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mass moment of inertia", required = false) String massMomentOfInertia,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "Target speed", description = "Revolutions per minute", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target speed", required = false) String targetSpeed,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "rotary.actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.actuatorFamily", required = false) List<String> rotaryActuatorFamily,
        @Parameter(name = "rotary.actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.actuatorFlangeSize", required = false) List<Integer> rotaryActuatorFlangeSize,
        @Parameter(name = "rotary.allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.allSolutions", required = false) Boolean rotaryAllSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "rotary.gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.gearRatio", required = false) List<Integer> rotaryGearRatio,
        @Parameter(name = "rotary.gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.gearboxType", required = false) List<String> rotaryGearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "rotary.motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorControllerFamily", required = false) List<String> rotaryMotorControllerFamily,
        @Parameter(name = "rotary.motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorFamily", required = false) List<String> rotaryMotorFamily,
        @Parameter(name = "rotary.motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorFlangeSize", required = false) List<Integer> rotaryMotorFlangeSize,
        @Parameter(name = "rotary.motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.motorTechnology", required = false) List<String> rotaryMotorTechnology,
        @Parameter(name = "rotary.networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rotary.networkCommunication", required = false) List<String> rotaryNetworkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN,
        @Parameter(name = "Include Third Party Transmission", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Include Third Party Transmission", required = false) String includeThirdPartyTransmission,
        @Parameter(name = "Third Party Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Mass moment of inertia", required = false) String thirdPartyMassMomentOfInertia,
        @Parameter(name = "Third Party Transmission Efficiency", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Efficiency", required = false) String thirdPartyTransmissionEfficiency,
        @Parameter(name = "Third Party Transmission Name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Third Party Transmission Name", required = false) String thirdPartyTransmissionName,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication
    ) {
        return solutionsForThirdPartyTransmission(externalTorqueMode, targetPosition, thirdPartyTransmissionRatioNumerator, thirdPartyTransmissionRatioDenominator, useCaseType, acceleration, deceleration, externalTorque, massMomentOfInertia, pauseTime, targetSpeed, travelTime, travelTimeMode, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, rotaryActuatorFamily, rotaryActuatorFlangeSize, rotaryAllSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, rotaryGearRatio, rotaryGearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, rotaryMotorControllerFamily, rotaryMotorFamily, rotaryMotorFlangeSize, rotaryMotorTechnology, rotaryNetworkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN, includeThirdPartyTransmission, thirdPartyMassMomentOfInertia, thirdPartyTransmissionEfficiency, thirdPartyTransmissionName, actuatorFamily, actuatorFlangeSize, allSolutions, gearRatio, gearboxType, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForThirdPartyTransmission(String externalTorqueMode, String targetPosition, String thirdPartyTransmissionRatioNumerator, String thirdPartyTransmissionRatioDenominator, String useCaseType, String acceleration, String deceleration, String externalTorque, String massMomentOfInertia, String pauseTime, String targetSpeed, String travelTime, String travelTimeMode, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> rotaryActuatorFamily, List<Integer> rotaryActuatorFlangeSize, Boolean rotaryAllSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> rotaryGearRatio, List<String> rotaryGearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> rotaryMotorControllerFamily, List<String> rotaryMotorFamily, List<Integer> rotaryMotorFlangeSize, List<String> rotaryMotorTechnology, List<String> rotaryNetworkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN, String includeThirdPartyTransmission, String thirdPartyMassMomentOfInertia, String thirdPartyTransmissionEfficiency, String thirdPartyTransmissionName, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, List<Integer> gearRatio, List<String> gearboxType, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/userSpecificLinear : Gets Solutions for application type User Specific linear.
     *
     * @param acceleration Meters per second squared (optional)
     * @param deceleration Meters per second squared (optional)
     * @param frictionForce Newton (optional)
     * @param frictionForceMode  (optional)
     * @param pauseTime Second (optional)
     * @param thePayloadMass Kilogram (optional)
     * @param speed Meters per second (optional)
     * @param targetPosition Meters per second (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param actuatorStrokeType  (optional)
     * @param actuatorStroke Millimeter (optional)
     * @param actuatorTechnology  (optional)
     * @param actuatorType  (optional)
     * @param centerOfForceXMm  (optional)
     * @param centerOfForceYMm  (optional)
     * @param centerOfForceZMm  (optional)
     * @param centerOfGravityX Millimeter (optional)
     * @param centerOfGravityY Millimeter (optional)
     * @param centerOfGravityZ Millimeter (optional)
     * @param externalForce  (optional)
     * @param foodIndustry  (optional)
     * @param guideLoad  (optional)
     * @param guideTechnology possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE (optional)
     * @param jerkUserDefined  (optional)
     * @param maxGravitationalForce  (optional)
     * @param motorMounting  (optional)
     * @param mountingOrientationAxial possible Values: 0.0, 90.0, -90.0 (optional)
     * @param mountingOrientationRadial possible Values: 0.0, 90.0, 180.0 (optional)
     * @param repetitionAccuracy  (optional)
     * @param slideProtected  (optional)
     * @param stroke Millimeter (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForUserSpecificLinear",
        summary = "Gets Solutions for application type User Specific linear.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/userSpecificLinear",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForUserSpecificLinear(
        @Parameter(name = "Acceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Meters per second squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "Friction force", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force", required = false) String frictionForce,
        @Parameter(name = "Friction force mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Friction force mode", required = false) String frictionForceMode,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "The payload mass", description = "Kilogram", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The payload mass", required = false) String thePayloadMass,
        @Parameter(name = "Speed", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Speed", required = false) String speed,
        @Parameter(name = "Target Position", description = "Meters per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target Position", required = false) String targetPosition,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Actuator Stroke Type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke Type", required = false) String actuatorStrokeType,
        @Parameter(name = "Actuator Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator Stroke", required = false) Double actuatorStroke,
        @Parameter(name = "actuatorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorTechnology", required = false) List<String> actuatorTechnology,
        @Parameter(name = "actuatorType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorType", required = false) List<String> actuatorType,
        @Parameter(name = "Center of force X (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force X (mm)", required = false) Double centerOfForceXMm,
        @Parameter(name = "Center of force Y (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Y (mm)", required = false) Double centerOfForceYMm,
        @Parameter(name = "Center of force Z (mm)", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of force Z (mm)", required = false) Double centerOfForceZMm,
        @Parameter(name = "Center of gravity X", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity X", required = false) Double centerOfGravityX,
        @Parameter(name = "Center of gravity Y", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Y", required = false) Double centerOfGravityY,
        @Parameter(name = "Center of gravity Z", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Center of gravity Z", required = false) Double centerOfGravityZ,
        @Parameter(name = "External force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External force", required = false) Double externalForce,
        @Parameter(name = "Food industry", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Food industry", required = false) Boolean foodIndustry,
        @Parameter(name = "Guide Load", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Load", required = false) Boolean guideLoad,
        @Parameter(name = "Guide Technology", description = "possible Values: SLIDING_GUIDE,RECIRCULATING_BALL_BEARING_GUIDE,ROLLER_GUIDE,BALL_BEARING_CAGE_GUIDE,HEAVY_DUTY_GUIDE", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Guide Technology", required = false) String guideTechnology,
        @Parameter(name = "Jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Max. gravitational force", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Max. gravitational force", required = false) Double maxGravitationalForce,
        @Parameter(name = "Motor mounting", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor mounting", required = false) String motorMounting,
        @Parameter(name = "Mounting orientation axial", description = "possible Values: 0.0, 90.0, -90.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation axial", required = false) Double mountingOrientationAxial,
        @Parameter(name = "Mounting orientation radial", description = "possible Values: 0.0, 90.0, 180.0", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mounting orientation radial", required = false) Double mountingOrientationRadial,
        @Parameter(name = "Repetition accuracy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Repetition accuracy", required = false) Double repetitionAccuracy,
        @Parameter(name = "Slide Protected", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Slide Protected", required = false) Boolean slideProtected,
        @Parameter(name = "Stroke", description = "Millimeter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Stroke", required = false) Double stroke,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForUserSpecificLinear(acceleration, deceleration, frictionForce, frictionForceMode, pauseTime, thePayloadMass, speed, targetPosition, travelTime, travelTimeMode, actuatorStrokeType, actuatorStroke, actuatorTechnology, actuatorType, centerOfForceXMm, centerOfForceYMm, centerOfForceZMm, centerOfGravityX, centerOfGravityY, centerOfGravityZ, externalForce, foodIndustry, guideLoad, guideTechnology, jerkUserDefined, maxGravitationalForce, motorMounting, mountingOrientationAxial, mountingOrientationRadial, repetitionAccuracy, slideProtected, stroke, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForUserSpecificLinear(String acceleration, String deceleration, String frictionForce, String frictionForceMode, String pauseTime, String thePayloadMass, String speed, String targetPosition, String travelTime, String travelTimeMode, String actuatorStrokeType, Double actuatorStroke, List<String> actuatorTechnology, List<String> actuatorType, Double centerOfForceXMm, Double centerOfForceYMm, Double centerOfForceZMm, Double centerOfGravityX, Double centerOfGravityY, Double centerOfGravityZ, Double externalForce, Boolean foodIndustry, Boolean guideLoad, String guideTechnology, Double jerkUserDefined, Double maxGravitationalForce, String motorMounting, Double mountingOrientationAxial, Double mountingOrientationRadial, Double repetitionAccuracy, Boolean slideProtected, Double stroke, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/solution/userSpecificRotary : Gets Solutions for application type User Specific rotary.
     *
     * @param acceleration Revolutions per minute per second (optional)
     * @param deceleration Revolutions per minute per second (optional)
     * @param externalTorque Newton (optional)
     * @param massMomentOfInertia Kilogram centimeters squared (optional)
     * @param pauseTime Second (optional)
     * @param targetPosition Number of rotations (optional)
     * @param targetSpeed Revolutions per minute (optional)
     * @param travelTime Second (optional)
     * @param travelTimeMode  (optional)
     * @param actuatorType  (optional)
     * @param jerkUserDefined  (optional)
     * @param motorShaft  (optional)
     * @param accelerationBehaviour soft (0.1), medium (0.05), hard (0.01) (optional)
     * @param actuatorFamily  (optional)
     * @param actuatorFlangeSize  (optional)
     * @param allSolutions  (optional)
     * @param ambientTemperature Celsius (optional)
     * @param cableLength Meter (optional)
     * @param theCountryCode  (optional)
     * @param encoderType possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED (optional)
     * @param gearRatio  (optional)
     * @param gearboxType  (optional)
     * @param inertiaRatio  (optional)
     * @param theLanguageCode  (optional)
     * @param ifTheApplicationIsCalledFromAThirdPartyApplication  (optional)
     * @param motorBrake  (optional)
     * @param motorControllerFamily  (optional)
     * @param motorFamily  (optional)
     * @param motorFlangeSize  (optional)
     * @param motorTechnology  (optional)
     * @param networkCommunication  (optional)
     * @param supplyVoltage1Phase  (optional)
     * @param supplyVoltage3Phase  (optional)
     * @param supplyVoltageDC  (optional)
     * @param theSystemTypeEGLINEARDRIVETRAIN  (optional)
     * @return Returns a SolutionResponseDTO (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "solutionsForUserSpecificRotary",
        summary = "Gets Solutions for application type User Specific rotary.",
        tags = { "Solution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a SolutionResponseDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SolutionResponseDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = SolutionResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/solution/userSpecificRotary",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<SolutionResponseDTO> _solutionsForUserSpecificRotary(
        @Parameter(name = "Acceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration", required = false) String acceleration,
        @Parameter(name = "Deceleration", description = "Revolutions per minute per second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Deceleration", required = false) String deceleration,
        @Parameter(name = "External Torque", description = "Newton", in = ParameterIn.QUERY) @Valid @RequestParam(value = "External Torque", required = false) String externalTorque,
        @Parameter(name = "Mass moment of inertia", description = "Kilogram centimeters squared", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Mass moment of inertia", required = false) String massMomentOfInertia,
        @Parameter(name = "Pause time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Pause time", required = false) String pauseTime,
        @Parameter(name = "Target position", description = "Number of rotations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target position", required = false) String targetPosition,
        @Parameter(name = "Target speed", description = "Revolutions per minute", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Target speed", required = false) String targetSpeed,
        @Parameter(name = "Travel time", description = "Second", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time", required = false) String travelTime,
        @Parameter(name = "Travel time mode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Travel time mode", required = false) String travelTimeMode,
        @Parameter(name = "Actuator type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Actuator type", required = false) String actuatorType,
        @Parameter(name = "jerk user defined", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jerk user defined", required = false) Double jerkUserDefined,
        @Parameter(name = "Motor shaft", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor shaft", required = false) String motorShaft,
        @Parameter(name = "Acceleration Behaviour", description = "soft (0.1), medium (0.05), hard (0.01)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Acceleration Behaviour", required = false) Double accelerationBehaviour,
        @Parameter(name = "actuatorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFamily", required = false) List<String> actuatorFamily,
        @Parameter(name = "actuatorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actuatorFlangeSize", required = false) List<Integer> actuatorFlangeSize,
        @Parameter(name = "allSolutions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allSolutions", required = false) Boolean allSolutions,
        @Parameter(name = "Ambient Temperature", description = "Celsius", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Ambient Temperature", required = false) Double ambientTemperature,
        @Parameter(name = "Cable length", description = "Meter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Cable length", required = false) Double cableLength,
        @Parameter(name = "The country code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The country code", required = false) String theCountryCode,
        @Parameter(name = "Encoder Type", description = "possible Values: INCREMENTAL,ABSOLUTE_SINGLE_TURN,ABSOLUTE_MULTI_TURN,NO_ENCODER,FESTO_RECOMMENDED", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Encoder Type", required = false) String encoderType,
        @Parameter(name = "gearRatio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearRatio", required = false) List<Integer> gearRatio,
        @Parameter(name = "gearboxType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gearboxType", required = false) List<String> gearboxType,
        @Parameter(name = "Inertia Ratio", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Inertia Ratio", required = false) Double inertiaRatio,
        @Parameter(name = "The language code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The language code", required = false) String theLanguageCode,
        @Parameter(name = "If the application is called from a third party application", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "If the application is called from a third party application", required = false) String ifTheApplicationIsCalledFromAThirdPartyApplication,
        @Parameter(name = "Motor brake", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Motor brake", required = false) String motorBrake,
        @Parameter(name = "motorControllerFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorControllerFamily", required = false) List<String> motorControllerFamily,
        @Parameter(name = "motorFamily", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFamily", required = false) List<String> motorFamily,
        @Parameter(name = "motorFlangeSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorFlangeSize", required = false) List<Integer> motorFlangeSize,
        @Parameter(name = "motorTechnology", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "motorTechnology", required = false) List<String> motorTechnology,
        @Parameter(name = "networkCommunication", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "networkCommunication", required = false) List<String> networkCommunication,
        @Parameter(name = "Supply Voltage 1-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 1-phase", required = false) String supplyVoltage1Phase,
        @Parameter(name = "Supply Voltage 3-phase", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage 3-phase", required = false) String supplyVoltage3Phase,
        @Parameter(name = "Supply Voltage DC", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Supply Voltage DC", required = false) String supplyVoltageDC,
        @Parameter(name = "The system type e.g. LINEAR_DRIVE_TRAIN", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "The system type e.g. LINEAR_DRIVE_TRAIN", required = false) String theSystemTypeEGLINEARDRIVETRAIN
    ) {
        return solutionsForUserSpecificRotary(acceleration, deceleration, externalTorque, massMomentOfInertia, pauseTime, targetPosition, targetSpeed, travelTime, travelTimeMode, actuatorType, jerkUserDefined, motorShaft, accelerationBehaviour, actuatorFamily, actuatorFlangeSize, allSolutions, ambientTemperature, cableLength, theCountryCode, encoderType, gearRatio, gearboxType, inertiaRatio, theLanguageCode, ifTheApplicationIsCalledFromAThirdPartyApplication, motorBrake, motorControllerFamily, motorFamily, motorFlangeSize, motorTechnology, networkCommunication, supplyVoltage1Phase, supplyVoltage3Phase, supplyVoltageDC, theSystemTypeEGLINEARDRIVETRAIN);
    }

    // Override this method
    default  ResponseEntity<SolutionResponseDTO> solutionsForUserSpecificRotary(String acceleration, String deceleration, String externalTorque, String massMomentOfInertia, String pauseTime, String targetPosition, String targetSpeed, String travelTime, String travelTimeMode, String actuatorType, Double jerkUserDefined, String motorShaft, Double accelerationBehaviour, List<String> actuatorFamily, List<Integer> actuatorFlangeSize, Boolean allSolutions, Double ambientTemperature, Double cableLength, String theCountryCode, String encoderType, List<Integer> gearRatio, List<String> gearboxType, Double inertiaRatio, String theLanguageCode, String ifTheApplicationIsCalledFromAThirdPartyApplication, String motorBrake, List<String> motorControllerFamily, List<String> motorFamily, List<Integer> motorFlangeSize, List<String> motorTechnology, List<String> networkCommunication, String supplyVoltage1Phase, String supplyVoltage3Phase, String supplyVoltageDC, String theSystemTypeEGLINEARDRIVETRAIN) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"solutions\" : [ { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" }, { \"dutyRatioChopper\" : \"dutyRatioChopper\", \"motorMounting\" : \"motorMounting\", \"motorMaxRotation\" : \"motorMaxRotation\", \"chopper\" : \"chopper\", \"productInformation\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"gearType\" : \"gearType\", \"maxMotorTorque\" : \"maxMotorTorque\", \"peakUtilizationController\" : \"peakUtilizationController\", \"effUtilizationController\" : \"effUtilizationController\", \"motorTypeCode\" : \"motorTypeCode\", \"peakUtilizationMotor\" : \"peakUtilizationMotor\", \"rank\" : 7, \"productInformationMap\" : { \"key\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" } }, \"id\" : \"id\", \"supplyVoltage\" : \"supplyVoltage\", \"controllerVoltage\" : \"controllerVoltage\", \"controllerTypeCode\" : \"controllerTypeCode\", \"rmsCurrent\" : \"rmsCurrent\", \"travelTime\" : [ \"travelTime\", \"travelTime\" ], \"resistorChopper\" : \"resistorChopper\", \"controllerType\" : \"controllerType\", \"mountingKitPartNumber\" : \"mountingKitPartNumber\", \"motorMaxTorsionMoment\" : \"motorMaxTorsionMoment\", \"inertiaRatio\" : 0.8008281904610115, \"maxDeceleration\" : \"maxDeceleration\", \"maxAcceleration\" : \"maxAcceleration\", \"notifications\" : { \"key\" : true }, \"motorNominalCurrent\" : \"motorNominalCurrent\", \"mountingKitTypeCode\" : \"mountingKitTypeCode\", \"controllerNominalCurrent\" : \"controllerNominalCurrent\", \"gearPartNumber\" : \"gearPartNumber\", \"powerChopper\" : \"powerChopper\", \"maxMotorRevolution\" : \"maxMotorRevolution\", \"controllerCommunication\" : [ \"controllerCommunication\", \"controllerCommunication\" ], \"maxCurrent\" : \"maxCurrent\", \"automaticSelectedAccessories\" : [ { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" }, { \"name\" : \"name\", \"productInformation\" : { \"image\" : { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, \"images\" : [ { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" }, { \"urls\" : [ { \"key\" : \"urls\" }, { \"key\" : \"urls\" } ], \"altText\" : \"altText\", \"type\" : \"type\" } ], \"coreRange\" : true, \"name\" : \"name\", \"partNumber\" : \"partNumber\", \"text\" : [ \"text\", \"text\" ], \"typeCode\" : \"typeCode\" }, \"partNumber\" : \"partNumber\", \"type\" : \"CABLE\", \"typeCode\" : \"typeCode\" } ], \"emergencyDeceleration\" : \"emergencyDeceleration\", \"effUtilizationMotor\" : \"effUtilizationMotor\", \"emergencyDisplacement\" : \"emergencyDisplacement\", \"gearRatio\" : \"gearRatio\", \"controllerPartNumber\" : \"controllerPartNumber\", \"maxSpeed\" : \"maxSpeed\", \"rmsPower\" : \"rmsPower\", \"motorEncoderType\" : \"motorEncoderType\", \"hashValue\" : \"hashValue\", \"gearTypeCode\" : \"gearTypeCode\", \"emergencyCurrent\" : \"emergencyCurrent\", \"motionSteps\" : [ { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 }, { \"travelTime\" : 6.84685269835264, \"jerk\" : 7.061401241503109, \"mass\" : 9.301444243932576, \"frictionForce\" : 2.3021358869347655, \"torque\" : 1.0246457001441578, \"decelerationTime\" : 5.637376656633329, \"velocity\" : 1.4894159098541704, \"planningTime\" : 4.145608029883936, \"speedTime\" : 7.386281948385884, \"deceleration\" : 5.962133916683182, \"acceleration\" : 6.027456183070403, \"pauseTime\" : 2.027123023002322, \"accelerationTime\" : 1.4658129805029452, \"targetPosition\" : 1.2315135367772556, \"massMomentOfInertia\" : 3.616076749251911 } ], \"rmsMotorTorque\" : \"rmsMotorTorque\", \"motorPartNumber\" : \"motorPartNumber\", \"cacosXML\" : \"cacosXML\", \"maxPower\" : \"maxPower\" } ], \"correlationId\" : \"correlationId\", \"notifications\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/translationText : Gets the text translations for the given language/country code.
     *
     * @param language  (optional, default to en)
     * @param country  (optional, default to gb)
     * @return Returns a map with text fragments (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "translations",
        summary = "Gets the text translations for the given language/country code.",
        tags = { "Translations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a map with text fragments", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/translationText",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<String> _translations(
        @Parameter(name = "language", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = false, defaultValue = "en") String language,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false, defaultValue = "gb") String country
    ) {
        return translations(language, country);
    }

    // Override this method
    default  ResponseEntity<String> translations(String language, String country) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/versionInformation : Gets version information.
     *
     * @return Returns a map with information (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "version",
        summary = "Gets version information.",
        tags = { "Version" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a map with information"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/versionInformation",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<Void> _version(
        
    ) {
        return version();
    }

    // Override this method
    default  ResponseEntity<Void> version() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
